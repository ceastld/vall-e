#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

nj=30
stage=2
stop_stage=3

# We assume dl_dir (download dir) contains the following
# directories and files. If not, you need to apply aishell2 through
# their official website.
# https://www.aishelltech.com/aishell_2
#
#  - $dl_dir/aishell2

dl_dir=$PWD/download

text_extractor="pypinyin_initials_finals"
audio_extractor="Encodec"  # or Fbank
audio_feats_dir=data/tokenized


. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "stage 0: Download data"

  # If you have pre-downloaded it to /path/to/aishell2,
  # you can create a symlink
  #
  #   ln -sfv /path/to/aishell2 $dl_dir/aishell2
  #
  # The directory structure is
  # aishell2/
  # |-- AISHELL-2
  # |   |-- iOS
  #         |-- data
  #             |-- wav
  #             |-- trans.txt
  #         |-- dev
  #             |-- wav
  #             |-- trans.txt
  #         |-- test
  #             |-- wav
  #             |-- trans.txt
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare aishell2 manifest"
  # We assume that you have downloaded and unzip the aishell2 corpus
  # to $dl_dir/aishell2
  if [ ! -f data/manifests/.aishell2_manifests.done ]; then
    mkdir -p data/manifests
    lhotse prepare aishell2 $dl_dir/aishell2 data/manifests -j $nj
    touch data/manifests/.aishell2_manifests.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Tokenize/Fbank AiShell2"
  mkdir -p ${audio_feats_dir}
  if [ ! -e ${audio_feats_dir}/.aishell2.tokenize.done ]; then
    CUDA_VISIBLE_DEVICES="7,6" python3 bin/tokenizer.py --dataset-parts "train dev test" \
    --prefix aishell2 \
    --audio-extractor ${audio_extractor} \
    --text-extractor ${text_extractor} \
    --batch-duration 400 \
    --src-dir "data/manifests" \
    --output-dir "${audio_feats_dir}"
  fi
  touch ${audio_feats_dir}/.aishell2.tokenize.done
fi

# TODO split aishell2 to cuts_train ...

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Prepare aishell2 train/dev/test"
  if [ ! -e ${audio_feats_dir}/.aishell2.train.done ]; then
    # dev
    lhotse copy \
      ${audio_feats_dir}/aishell2_cuts_dev.jsonl.gz \
      ${audio_feats_dir}/cuts_dev.jsonl.gz

    # train
    lhotse copy \
      ${audio_feats_dir}/aishell2_cuts_train.jsonl.gz \
      ${audio_feats_dir}/cuts_train.jsonl.gz

    # test
    lhotse copy \
      ${audio_feats_dir}/aishell2_cuts_test.jsonl.gz \
      ${audio_feats_dir}/cuts_test.jsonl.gz

    touch ${audio_feats_dir}/.aishell2.train.done
  fi
fi


python3 ./bin/display_manifest_statistics.py --manifest-dir ${audio_feats_dir}
